import os
import requests
import paramiko
from core.interfaces import BotHandler
from dotenv import load_dotenv

load_dotenv()

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_URL = os.getenv("DEEPSEEK_URL", "https://api.deepseek.com/v1/chat/completions")
SSH_KEY_PATH = os.getenv("SSH_KEY_PATH")
USERNAME = "avipython"

class FullstackDeveloperHandler(BotHandler):
    def can_handle(self, task_description: str) -> bool:
        keywords = ["—É—Å—Ç–∞–Ω–æ–≤–∏", "–Ω–∞—Å—Ç—Ä–æ–π", "—Å–µ—Ä–≤–µ—Ä", "nginx", "gunicorn", "–¥–æ–º–µ–Ω", "docker"]
        return any(word in task_description.lower() for word in keywords)

    def handle(self, task_description: str) -> str:
        try:
            command = self.ask_deepseek(task_description)
            if not command:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Ç –ò–ò"

            result = self.run_ssh_command(command)

            return (
                f"üõ†Ô∏è –§—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É:\n<code>{task_description}</code>\n\n"
                f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:\n<code>{command}</code>\n\n"
                f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n<code>{result}</code>"
            )
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ FullstackHandler: {str(e)}"

    def ask_deepseek(self, task_description: str) -> str:
        prompt = (
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω—É –∏—Å–ø–æ–ª–Ω—è–µ–º—É—é Linux-–∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–¥–∞—á–∏:\n{task_description}.\n"
            f"–¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ markdown."
        )

        response = requests.post(
            DEEPSEEK_URL,
            headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"},
            json={
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": prompt}]
            },
            timeout=10
        )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"].strip()

    def run_ssh_command(self, command: str) -> str:
        key = paramiko.Ed25519Key.from_private_key_file(SSH_KEY_PATH)
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect("localhost", username=USERNAME, pkey=key)

        stdin, stdout, stderr = client.exec_command(command)
        output = stdout.read().decode().strip()
        error = stderr.read().decode().strip()
        client.close()

        return output if output else error or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
