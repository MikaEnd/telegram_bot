# Протокол общения и взаимодействия с ИИ

1. Формат инструкции от ИИ:
   - Шаг 1: Идея (что и зачем делаем).
   - Шаг 2: Команда для открытия нужного файла через редактор (nano, vim и т.д.).
   - Шаг 3: Полное новое содержимое файла целиком (вместо патчей или diff), чтобы избежать ошибок частичных вставок.
   - Шаг 4: Сохранение и выход из редактора (например, Ctrl+O, Enter, Ctrl+X).
   - Шаг 5: Запуск `./sync_github.sh` и выбор "2" (Push).
   - Шаг 6: Перезапуск сервиса: `sudo systemctl restart telegram_bot`.
   - Шаг 7: Проверка результата в Telegram (тестовая команда).

2. По умолчанию **HUMAN_EVOLUTION_LOG.txt** и **DEV_PLAN.txt**
   - не перезаписываются, а **дописываются в конец** вручную.

3. При обновлении файлов приводить полный новый текст файла целиком (вместо патчей или diff), чтобы избежать ошибок частичных вставок.

4. При генерации кода и инструкций ИИ:
   - Всегда давать полный контекст, избегать фрагментов и догадок.
   - Не использовать автоматическую вставку текста в файлы через скрипты.

5. Память проекта:
   - Проект опирается на `memory/` — ИИ ориентируется на её содержимое при входе в контекст.
   - Задача разработчика: **периодически знакомиться с актуальным содержимым `memory/`**, чтобы понимать, что уже зафиксировано.

6. Перезапуск бота:
   - После каждого изменения `bot.py` и файлов в `memory/` требуется выполнять перезапуск сервиса:
     ```bash
     sudo systemctl restart telegram_bot
     ```

7. Назначение проекта:
   - ManagerBot — это не просто мониторинг, а **универсальный помощник для выполнения команд и задач**, с дальнейшим расширением в рамках ролей, компетенций и панели администратора.

8. Telegram-команды:
   - `/start` — приветствие.
   - `/status` — краткая сводка.
   - `/services` — список systemd-сервисов.
   - `/processes` — топ процессов.
   - `/restart_service [name]` — перезапуск службы.
   - `/uptime`, `/cpu`, `/memory`, `/disk` — мониторинг ресурсов.

## Расширение протокола
- Всегда проверяйте текущую рабочую директорию перед выполнением команд (например, через `pwd`), чтобы убедиться, что вы находитесь в нужном контексте проекта.
- Коммиты должны быть атомарными: каждое сообщение коммита должно решать **только одну** задачу.

