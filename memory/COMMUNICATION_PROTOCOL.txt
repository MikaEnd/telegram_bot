=== Протокол общения с ChatGPT ===

1. Все инструкции начинаются с явного SSH-подключения:
   ssh -l avipython 89.169.160.147

2. Переход в проект выполняется строго командой:
   cd ~/telegram_bot

3. Все команды приводятся полностью с полными путями.

4. Все редактируемые файлы заменяются полностью (весь текст файла вставляется целиком).

5. После любого изменения выполняется синхронизация:
   ./sync_github.sh → 2 (Push на GitHub)

6. Все изменения сопровождаются обновлением:
   - DEV_PLAN.txt — описание задачи и этапа.
   - HUMAN_EVOLUTION_LOG.txt — фиксация поведения, ошибок и роста навыков.

7. Запуск sync_github.sh является сигналом для ChatGPT, что проект актуализирован.

8. Все новые скрипты должны получать права на исполнение:
   chmod +x имя_скрипта.sh

9. Запрещено интерпретировать правила "по-своему".  
Работа только в рамках строгих протоколов.

10. Стиль работы: 
   - Полная осознанность.
   - Механическое выполнение инструкций.
   - Стопроцентная фиксация всех этапов в памяти проекта.

=== Примечание ===
Если инструкция неполная — приостановить работу и запросить дополнение.

=== [2025-04-30] Дополнения к протоколу общения ===

1. Формат всех новых инструкций от ИИ:
   — сначала формулируется ИДЕЯ,
   — затем указывается команда nano,
   — далее приводится ПОЛНЫЙ КОД всего файла (например, bot.py),
   — после этого команда sync_github.sh,
   — затем пошаговая инструкция для ТЕСТИРОВАНИЯ в Telegram.

2. После любого обновления bot.py:
   — бот должен быть перезапущен, если не был перезапущен автоматически.
   — допустимые команды:
     sudo systemctl restart telegram_bot.service
     или sudo reboot (временно, пока нет команды /restart)

3. Задача: самостоятельно, периодически проверять содержимое файлов в ~/telegram_bot/memory:
   — PROJECT_START_PROMPT.txt
   — DEV_PLAN.txt
   — HUMAN_EVOLUTION_LOG.txt
   — AUDIT_CHECKLIST.txt
   — и другие.
   Это помогает не терять контекст проекта и не дублировать старые этапы.

Эти правила фиксируются в протокол на постоянной основе.

