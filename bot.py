import os
import subprocess
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_TELEGRAM_ID"))

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ManagerBot.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/status ‚Äî –°–≤–æ–¥–∫–∞\n"
        "/services ‚Äî systemd\n"
        "/processes ‚Äî —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        "/restart_service [name] ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
        "/uptime /cpu /memory /disk"
    )

def uptime(update: Update, context: CallbackContext):
    result = subprocess.run(['uptime', '-p'], capture_output=True, text=True)
    update.message.reply_text(f"üïí –ê–ø—Ç–∞–π–º —Å–µ—Ä–≤–µ—Ä–∞:\n{result.stdout.strip()}")

def cpu(update: Update, context: CallbackContext):
    result = subprocess.run("top -bn1 | grep 'Cpu(s)'", shell=True, capture_output=True, text=True)
    update.message.reply_text(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ CPU:\n{result.stdout.strip()}")

def memory(update: Update, context: CallbackContext):
    result = subprocess.run(['free', '-h'], capture_output=True, text=True)
    update.message.reply_text(f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:\n{result.stdout.strip()}")

def disk(update: Update, context: CallbackContext):
    result = subprocess.run(['df', '-h'], capture_output=True, text=True)
    update.message.reply_text(f"üíΩ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤:\n{result.stdout.strip()}")

def services(update: Update, context: CallbackContext):
    result = subprocess.run(['systemctl', 'list-units', '--type=service', '--state=running', '--no-pager'], capture_output=True, text=True)
    services = '\n'.join(result.stdout.strip().split('\n')[:20])
    update.message.reply_text(f"üß© –ê–∫—Ç–∏–≤–Ω—ã–µ systemd-—Å–µ—Ä–≤–∏—Å—ã (–ø–µ—Ä–≤—ã–µ 20):\n{services}")

def processes(update: Update, context: CallbackContext):
    result = subprocess.run("ps aux --sort=-%mem | head -n 10", shell=True, capture_output=True, text=True)
    update.message.reply_text(f"üìà –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏:\n{result.stdout.strip()}")

def restart_service(update: Update, context: CallbackContext):
    args = context.args
    if not args:
        update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞: /restart_service nginx")
        return
    service = args[0]
    update.message.reply_text(f"‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ `{service}`...", parse_mode='Markdown')
    result = subprocess.run(['sudo', 'systemctl', 'restart', service])
    if result.returncode == 0:
        update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω `{service}`", parse_mode='Markdown')
    else:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ `{service}`. –ö–æ–¥: {result.returncode}", parse_mode='Markdown')

def status(update: Update, context: CallbackContext):
    uptime(update, context)
    cpu(update, context)
    memory(update, context)
    disk(update, context)

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("uptime", uptime))
    dp.add_handler(CommandHandler("cpu", cpu))
    dp.add_handler(CommandHandler("memory", memory))
    dp.add_handler(CommandHandler("disk", disk))
    dp.add_handler(CommandHandler("services", services))
    dp.add_handler(CommandHandler("processes", processes))
    dp.add_handler(CommandHandler("restart_service", restart_service))
    dp.add_handler(CommandHandler("status", status))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
