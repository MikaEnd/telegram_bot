import os
import json
import threading
import logging
import re
from dotenv import load_dotenv
import pika
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from geometry_backend.core.handlers.routing import get_handler_by_competence

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="logs/telegram_bot.log",
    filemode="a"
)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        user_query = " ".join(context.args)
        chat_id = update.effective_chat.id
        handler = get_handler_by_competence("–º–µ–Ω–µ–¥–∂–µ—Ä")
        if handler:
            reply = await handler.handle(str(chat_id), user_query)
        else:
            reply = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏."
    else:
        reply = "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask"
    await update.message.reply_text(reply)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É)
async def handle_clarification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message and "üìù –Ø –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É:" in update.message.reply_to_message.text:
        details = update.message.text
        original = update.message.reply_to_message.text
        m = re.search(r'–Ø –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É: "(.*)"', original)
        task = m.group(1) if m else "<–∑–∞–¥–∞—á–∞>"
        handler = get_handler_by_competence("–º–µ–Ω–µ–¥–∂–µ—Ä")
        if handler:
            reply = await handler.handle(str(update.effective_chat.id), details)
        else:
            reply = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."
        await update.message.reply_text(reply)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("ask", ask))
    app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, handle_clarification))

    app.run_polling()

if __name__ == "__main__":
    main()
