import os
import json
import threading
import logging
import re
from dotenv import load_dotenv
import pika
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from core.router import route_task
from core.interfaces import send_task, RABBITMQ_URL, TASK_QUEUE

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="logs/telegram_bot.log",
    filemode="a"
)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        user_query = " ".join(context.args)
        chat_id = update.effective_chat.id
        role = route_task(user_query)
        try:
            send_task(role, user_query, chat_id)
            forward_msg = "üì® –ü–µ—Ä–µ–¥–∞–ª –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        except Exception as e:
            logging.error(f"send_task failed: {e}", exc_info=True)
            forward_msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        response = (
            f"üß† –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞: \"{user_query}\"\n"
            f"üîÄ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: *{role}*\n"
            f"{forward_msg}"
        )
    else:
        response = "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask"
    await update.message.reply_text(response, parse_mode="Markdown")

def consume_queue(app):
    parameters = pika.URLParameters(RABBITMQ_URL)
    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()
    channel.queue_declare(queue=TASK_QUEUE, durable=True)
    channel.basic_qos(prefetch_count=1)

    def callback(ch, method, properties, body):
        msg = json.loads(body)
        chat_id = msg["chat_id"]
        text = msg["text"]
        app.bot.send_message(
            chat_id=chat_id,
            text=(
                f"üìù –Ø –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É: \"{text}\".\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏. (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
            )
        )
        ch.basic_ack(method.delivery_tag)

    channel.basic_consume(queue=TASK_QUEUE, on_message_callback=callback)
    channel.start_consuming()

async def handle_clarification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message and "üìù –Ø –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É:" in update.message.reply_to_message.text:
        details = update.message.text
        original = update.message.reply_to_message.text
        m = re.search(r'–Ø –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É: "(.*)"', original)
        task = m.group(1) if m else "<–∑–∞–¥–∞—á–∞>"
        await update.message.reply_text(
            f"üõ†Ô∏è –ü—Ä–∏–Ω—è–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ \"{task}\":\n\"{details}\"\n–ó–∞–ø—É—Å–∫–∞—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è..."
        )

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("ask", ask))
    app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, handle_clarification))

    consumer_thread = threading.Thread(target=consume_queue, args=(app,), daemon=True)
    consumer_thread.start()

    app.run_polling()

if __name__ == "__main__":
    main()
