import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)
from core.router import route_task

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="logs/telegram_bot.log",
    filemode="a"
)

# –ö–æ–º–∞–Ω–¥–∞: /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n(–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")

# –ö–æ–º–∞–Ω–¥–∞: /cpu
async def cpu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ CPU:\n(–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")

# –ö–æ–º–∞–Ω–¥–∞: /ask <—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞>
async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        user_query = " ".join(context.args)
        role = route_task(user_query)
        response = (
            f"üß† –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞: \"{user_query}\"\n"
            f"üîÄ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: *{role}*"
        )
    else:
        response = "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask"

    await update.message.reply_text(response, parse_mode="Markdown")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("cpu", cpu))
    app.add_handler(CommandHandler("ask", ask))

    app.run_polling()

if __name__ == "__main__":
    main()
