import os
import re
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import paramiko
import requests
from dotenv import load_dotenv
from datetime import datetime

# ‚úÖ –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
from bots.manager.manager_bot import ManagerBot

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
SSH_KEY_PATH = os.getenv("SSH_KEY_PATH", "/home/avipython/.ssh/id_ed25519")
ADMIN_ID = os.getenv("ADMIN_TELEGRAM_ID", "346399418")

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
manager = ManagerBot()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("/home/avipython/telegram_bot/bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def log_action(user_id: str, action: str, result: str = ""):
    with open("/home/avipython/telegram_bot/actions.log", "a") as f:
        f.write(f"[{datetime.now()}] User:{user_id} | {action}\n")
        if result:
            f.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n\n")

def clean_command(raw_command: str) -> str:
    return re.sub(r'```(bash)?|```', '', raw_command).strip()

def execute_ssh_command(command: str) -> str:
    try:
        key = paramiko.Ed25519Key.from_private_key_file(SSH_KEY_PATH)
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect("localhost", username="avipython", pkey=key)

        stdin, stdout, stderr = client.exec_command(command)
        output = stdout.read().decode().strip()
        error = stderr.read().decode().strip()
        client.close()

        return output if output else error or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    except Exception as e:
        return f"SSH error: {str(e)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    log_action(user_id, "Command /start")

    text = (
        "üñ•Ô∏è –Ø –ò–ò-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
        "/ask <–∑–∞–¥–∞—á–∞> - –ø–µ—Ä–µ–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑–∞–¥–∞—á—É\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n/ask –Ω–∞—Å—Ç—Ä–æ–π Nginx –¥–ª—è —Å–∞–π—Ç–∞"
    )
    await update.message.reply_text(text)

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    if not context.args:
        log_action(user_id, "Empty /ask command")
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ /ask")
        return

    question = " ".join(context.args)
    log_action(user_id, f"üß† –ó–∞–¥–∞—á–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {question}")

    try:
        response = manager.handle_user_task(question)
        await update.message.reply_text(response, parse_mode="HTML")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        log_action(user_id, error_msg)
        await update.message.reply_text(error_msg)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    log_action(user_id, "Command /status")
    output = execute_ssh_command("df -h && free -h")
    await update.message.reply_text(f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:</b>\n<code>{output}</code>", parse_mode="HTML")

def main():
    try:
        app = Application.builder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("ask", ask))
        app.add_handler(CommandHandler("status", status))

        logger.info("Bot starting...")
        app.run_polling()
    except Exception as e:
        logger.critical(f"Fatal error: {str(e)}")
        raise

if __name__ == "__main__":
    main()
