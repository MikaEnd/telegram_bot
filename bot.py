import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from core.router import route_task
#from core.interfaces import send_task  # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="logs/telegram_bot.log",
    filemode="a"
)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        user_query = " ".join(context.args)
        role = route_task(user_query)
        # –≤–º–µ—Å—Ç–æ send_task(role, user_query) –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º:
        response = (
            f"üß† –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞: \"{user_query}\"\n"
            f"üîÄ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: *{role}*\n"
            "üì® (–æ—á–µ—Ä–µ–¥—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–¥–∞—á–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞)"
        )
    else:
        response = "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask"

    await update.message.reply_text(response, parse_mode="Markdown")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("ask", ask))
    app.run_polling()

if __name__ == "__main__":
    main()
