import subprocess
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext

import os

BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_TELEGRAM_ID", "0"))

def is_admin(update: Update) -> bool:
    return update.effective_user.id == ADMIN_ID

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ManagerBot.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/status ‚Äî –°–≤–æ–¥–∫–∞\n"
        "/services ‚Äî systemd\n"
        "/processes ‚Äî —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        "/restart_service [name] ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
        "/uptime /cpu /memory /disk"
    )

def restart_service(update: Update, context: CallbackContext):
    if not is_admin(update):
        update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) != 1:
        update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞: /restart_service nginx")
        return

    service = context.args[0]
    update.message.reply_text(f"‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ `{service}`...", parse_mode='Markdown')

    try:
        result = subprocess.run(
            ["systemctl", "restart", service],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        if result.returncode == 0:
            update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ")
        else:
            update.message.reply_text(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ. –ö–æ–¥: {result.returncode}")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def services(update: Update, context: CallbackContext):
    result = subprocess.run(
        ["systemctl", "list-units", "--type=service", "--no-pager"],
        stdout=subprocess.PIPE
    )
    output = "\n".join(result.stdout.decode().split("\n")[0:20])
    update.message.reply_text(f"üß© –ê–∫—Ç–∏–≤–Ω—ã–µ systemd-—Å–µ—Ä–≤–∏—Å—ã (–ø–µ—Ä–≤—ã–µ 20):\n{output}")

def processes(update: Update, context: CallbackContext):
    result = subprocess.run(
        ["ps", "aux", "--sort=-%mem"],
        stdout=subprocess.PIPE
    )
    lines = result.stdout.decode().split("\n")[0:10]
    update.message.reply_text("üìà –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏:\n" + "\n".join(lines))

def uptime(update: Update, context: CallbackContext):
    result = subprocess.run(["uptime", "-p"], stdout=subprocess.PIPE)
    update.message.reply_text(f"üïí –ê–ø—Ç–∞–π–º —Å–µ—Ä–≤–µ—Ä–∞:\n{result.stdout.decode()}")

def cpu(update: Update, context: CallbackContext):
    result = subprocess.run(["top", "-bn1"], stdout=subprocess.PIPE)
    cpu_line = [line for line in result.stdout.decode().split("\n") if "Cpu(s)" in line][0]
    update.message.reply_text(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ CPU:\n{cpu_line}")

def memory(update: Update, context: CallbackContext):
    result = subprocess.run(["free", "-h"], stdout=subprocess.PIPE)
    update.message.reply_text(f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:\n{result.stdout.decode()}")

def disk(update: Update, context: CallbackContext):
    result = subprocess.run(["df", "-h"], stdout=subprocess.PIPE)
    update.message.reply_text(f"üíΩ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤:\n{result.stdout.decode()}")

def status(update: Update, context: CallbackContext):
    uptime(update, context)
    cpu(update, context)
    memory(update, context)
    disk(update, context)

def main():
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("status", status))
    dp.add_handler(CommandHandler("uptime", uptime))
    dp.add_handler(CommandHandler("cpu", cpu))
    dp.add_handler(CommandHandler("memory", memory))
    dp.add_handler(CommandHandler("disk", disk))
    dp.add_handler(CommandHandler("services", services))
    dp.add_handler(CommandHandler("processes", processes))
    dp.add_handler(CommandHandler("restart_service", restart_service, pass_args=True))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
